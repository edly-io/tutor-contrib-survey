// Only define them if not already declared
if (typeof useState === 'undefined' || typeof useEffect === 'undefined') {
  const react = await import('react');
  globalThis.useState = react.useState;
  globalThis.useEffect = react.useEffect;
}

const { getAuthenticatedHttpClient } = await import(
  "@edx/frontend-platform/auth"
);

const modalStyles = {
  overlayStyles: {
    position: 'fixed',
    top: 0,
    left: 0,
    width: '100vw',
    height: '100vh',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1000,
  },
  containerStyles: {
    width: '90vw',
    height: '90vh',
    backgroundColor: '#fff',
    borderRadius: '12px',
    boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',
    position: 'relative',
    display: 'flex',
    flexDirection: 'column',
    padding: '20px',
    overflow: 'hidden',
  },
  contentStyles: {
    flex: 1,
    overflowY: 'auto',
  },
  closeButton: {
    position: 'absolute',
    top: '16px',
    right: '16px',
    backgroundColor: '#BE3712',
    color: '#fff',
    border: 'none',
    borderRadius: '4px',
    padding: '8px 12px',
    cursor: 'pointer',
    fontSize: '14px',
  },
  warning: {
    position: 'absolute',
    top: '60px',
    right: '16px',
    color: '#ff9781 ',
    fontSize: '12px',
    width: '15%',
    textAlign: 'right', 
  }
};

const spinnerStyles = {
  bodyStyles: {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    height: "100vh",
  },
  spinner: {
    width: "20px",
    height: "20px",
    border: "2px solid lightgray",
    borderTop: "2px solid #3498db",
    borderRadius: "50%",
    animation: "spin 0.8s linear infinite",
  },
};

const getCookieValue = (name) => {
  const value = `; ${document.cookie}`;
  const parts = value.split(`; ${name}=`);
  if (parts.length === 2) return parts.pop().split(';').shift();
}

const isPreferedEnglish = () => {
  const languagePreference = getCookieValue('openedx-language-preference');
  return languagePreference === 'en';
}

const CenteredPopup = () => {
  const [status, setStatus] = useState(false);
  const [loading, setLoading] = useState(true);
  const [count, setCount] = useState(0);
  const [email, setEmail] = useState('');
  const [showSpinner, setShowSpinner] = useState(false);

  const STATUS = {
    show: "show",
    must_show: "must_show",
    dont_show: "dont_show",
  };
  
  const apiUrl = `${getConfig().LMS_BASE_URL}/api/`;

  const handleOnSkip = () => {
    setShowSpinner(true);

    const fetchStatus = async () => {
      try {
        const response = await getAuthenticatedHttpClient().get(
          apiUrl + "status/"
        );
        const APIStatus = response.data.status;
        if (APIStatus === STATUS.show || APIStatus === STATUS.dont_show) {
          setStatus(STATUS.dont_show);
        } else {
          setStatus(STATUS.must_show);
        }
      } catch {
        setStatus(STATUS.dont_show);
      } finally {
        setShowSpinner(false);
      }
    };

    const timer = setTimeout(fetchStatus, 2000);
    return () => clearTimeout(timer);
  }


  const handleOnLoad = () => {
    const updateFormLoaded = async () => {
      try {
        await getAuthenticatedHttpClient().post(
          apiUrl + "status/"
        );
      } catch (error) {
        console.log(error);
      }
    };

    updateFormLoaded();
  };

  const warningText = () => {
    let text = "";
    if (count >= 2) {
      text = isPreferedEnglish() ? "You must submit this form now then press the Close button to close it." : "Vous devez soumettre ce formulaire maintenant, puis appuyer sur le bouton Fermer pour le fermer.";
    } else {
      text = isPreferedEnglish() ? `You can skip filling this form ${2 - count} more time(s)` : `Vous pouvez ignorer le remplissage de ce formulaire ${2 - count} fois de plus`;
    }
    return text;
  };

  useEffect(() => {
    const fetchStatus = async () => {
      try {
        const response = await getAuthenticatedHttpClient().get(
          apiUrl + "status/"
        );
        setStatus(response.data.status);
        setCount(response.data.count);
        setEmail(response.data.email);
      } catch {
        setStatus(STATUS.dont_show);
      } finally {
        setLoading(false);
      }
    };

    fetchStatus();
  }, []);

  if (loading || status === STATUS.dont_show) return <></>;

  return ( 
    <div style={modalStyles.overlayStyles}>
      <style>
        {`
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        `}
      </style>
      <div style={modalStyles.containerStyles}>
        <div style={modalStyles.closeButton} onClick={handleOnSkip}>
          {!showSpinner ? <>{isPreferedEnglish() ? "Close" : "Fermer"}</> : <div style={spinnerStyles.spinner}></div>}
        </div>
        <div style={modalStyles.warning}>
            {warningText()}
        </div>
        <iframe
          src={isPreferedEnglish() 
            ? `https://docs.google.com/forms/d/e/{{ SURVEY_FORM_ID_1 }}/viewform?embedded=true&usp=pp_url&entry.405262843=${encodeURIComponent(email)}` 
            : `https://docs.google.com/forms/d/e/{{ SURVEY_FORM_ID_2 }}/viewform?embedded=true&usp=pp_url&entry.405262843=${encodeURIComponent(email)}`
          }
          width="100%"
          height="1000px"
          frameBorder="0"
          marginHeight="0"
          marginWidth="0"
          title="Google Form"
          onLoad={handleOnLoad}
        >
          Loadingâ€¦
        </iframe>
      </div>
    </div>
    )
};


